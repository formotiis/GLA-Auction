use AUCTIONS;

DROP TABLE IF EXISTS BIDDING;
DROP TABLE IF EXISTS ARTICLES;
DROP TABLE IF EXISTS USERS;

CREATE TABLE USERS (
    /* IDENTIFIERS */
    ID INT AUTO_INCREMENT PRIMARY KEY,
    LOGIN VARCHAR(20) NOT NULL UNIQUE,
    PASSWORD VARCHAR(32) NOT NULL,

    /* BASIC INFORMATIONS */
    FIRSTNAME VARCHAR(20) NOT NULL,
    LASTNAME VARCHAR(20) NOT NULL,
    PHONE VARCHAR(13),
    EMAIL VARCHAR(30) NOT NULL, 
    CANCELED INT DEFAULT 0,/* BUYER INFORMATIONS */

    /* BUYER INFORMATIONS */
    ADDRESS VARCHAR(76), /* Addresse */
    CITY VARCHAR(25), /* Ville */
    ZIP INT, /* Code postal */
    CARD VARCHAR(16) /* Numero de Carte Bancaire */
);

CREATE TABLE ARTICLES (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    OWNER INT NOT NULL,
    NAME VARCHAR(20) NOT NULL,
    DESCRIPTION VARCHAR(100),
    MINPRICE FLOAT NOT NULL, /* Prix de vente pre-encheres */
    CATEGORIES VARCHAR(100) NOT NULL,
    TIME DATE NOT NULL, /* Date fin de vente */
    CONSTRAINT fk_ownership
    FOREIGN KEY (OWNER) 
        REFERENCES USERS(ID)
);

CREATE TABLE BIDDING (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    BIDDER INT NOT NULL,
    ITEM INT NOT NULL,
    BID FLOAT NOT NULL,
    CONSTRAINT fk_bidder
    FOREIGN KEY (BIDDER) 
        REFERENCES USERS(ID),
    CONSTRAINT fk_article
    FOREIGN KEY (ITEM) 
        REFERENCES ARTICLES(ID)
);

INSERT INTO USERS (LOGIN, PASSWORD, FIRSTNAME, LASTNAME, PHONE, EMAIL, ADDRESS, CITY, ZIP, CARD) VALUES 
('admin', 'admin', 'Administrator', 'Ofthewebsite', '+33133831132', 'admin@projet.gla', '113 Av. Administration', 'Nancy', 54000, '1234567890123456');

INSERT INTO ARTICLES (ID, OWNER, NAME, DESCRIPTION, MINPRICE, CATEGORIES, TIME)
VALUES (1, 1, 'Projet de GLA',
        'Un projet de master informatique pour une matière appelée génie logiciel avancé à vendre ;)',
        300.5, 'Service,Informatique,Antiquité,Technologie', '2020-02-28');
INSERT INTO ARTICLES (ID, OWNER, NAME, DESCRIPTION, MINPRICE, CATEGORIES, TIME)
VALUES (2, 1, 'Test',
        'Test',
        255.5, 'Service,Informatique,Tests', '2020-02-28');

DELIMITER //
CREATE PROCEDURE availableArticles()
    BEGIN
        SELECT * FROM ARTICLES WHERE CURRENT_DATE<TIME;
    END//
CREATE PROCEDURE availableArticlesByName(IN articleName VARCHAR(255))
    BEGIN
        SELECT * FROM ARTICLES WHERE (CURRENT_DATE<TIME) AND (NAME LIKE articleName);
    END//
CREATE PROCEDURE availableArticlesByCategory(IN category VARCHAR(255))
    BEGIN
        SELECT * FROM ARTICLES WHERE CURRENT_DATE<TIME AND CATEGORIES LIKE category;
    END//
DELIMITER ;